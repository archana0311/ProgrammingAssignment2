makeCacheMatrix <- function(x = matrix()) {
p<-NULL
set<-function(y){
x<<-y
p<<-NULL
}
get<-function()x
setInverse<-function(inverse)j<<-inverse
getInverse<-function()j
list(set=set,get=get,
setInverse=setInverse,
getInverse=getInverse)
}
makeCacheMatrix()
class(makeCacheMatrix())
head(makeCacheMatrix())
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
cacheSolve()
cacheSolve <- function(x, ...) {
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- solve(mat,...)
x$setInverse(j)
j
}
cacheSolve()
class(cacheSolve())
cacheSolve <- function(x, ...) {
j <- x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat <- x$get()
j <- Inverse(mat,...)
x$setInverse(j)
j
}
cacheSolve()
